name: Build and Test

# Triggers the workflow on push event to any branch, pull request to main,
# or can be triggered manually
on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build_test_cover: # Renamed job
    name: Build, Test & Coverage
    runs-on: ubuntu-latest # Run only on Linux

    outputs: # Define output for the version
      semVer: ${{ steps.gitversion.outputs.semVer }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for GitVersion

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 9.0.203

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2 # Use a specific stable version
      with:
        versionSpec: '5.x'

    - name: Determine Version
      id: gitversion # Set an id to reference outputs like steps.gitversion.outputs.semVer
      uses: gittools/actions/gitversion/execute@v0.10.2

    - name: Display GitVersion outputs (optional debugging)
      run: |
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
        echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"

    - name: Restore dependencies
      run: dotnet restore

    - name: Build Desktop App
      run: dotnet build src/MainApp/CrowsNestMqtt.App.csproj --no-restore --configuration Release

    - name: Test with coverage
      run: dotnet test --collect:"XPlat Code Coverage;Format=json,cobertura" --filter "Category!=LocalOnly"
    
    - name: Generate coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:"./tests/**/coverage.cobertura.xml" -targetdir:"./TestResults/CoverageReport" -reporttypes:"Html;Cobertura;JsonSummary"

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: ./TestResults/CoverageReport
        if-no-files-found: warn
    - name: Publish Code Coverage Summary
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: ./TestResults/CoverageReport/Cobertura.xml
        badge: true
        fail_below_min: false
        format: markdown
        hide_branch_rate: false
        hide_complexity: false
        indicators: true
        output: both
        thresholds: '60 80'

    - name: Add Coverage PR Comment
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        path: ./TestResults/CoverageReport/code-coverage-results.md
