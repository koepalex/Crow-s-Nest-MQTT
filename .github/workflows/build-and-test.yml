name: Build and Test

# Triggers the workflow on push event to any branch, pull request to main,
# or can be triggered manually
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build_test_cover: 
    permissions:
      pull-requests: write

    name: Build, Test & Coverage
    runs-on: windows-latest 

    outputs: # Define output for the version
      semVer: ${{ steps.gitversion.outputs.semVer }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for GitVersion

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: "./global.json"

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v4.0.1 # Use a specific stable version
      with:
        versionSpec: '6.3.x'
        includePrerelease: true

    - name: Determine Version
      id: gitversion # Set an id to reference outputs like steps.gitversion.outputs.semVer
      uses: gittools/actions/gitversion/execute@v4.0.1

    - name: Display GitVersion outputs (optional debugging)
      run: |
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
        echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"

    - name: Restore dependencies
      run: dotnet restore

    - name: Build Desktop App
      run: dotnet build CrowsNestMQTT.slnx --no-restore --configuration Release

    - name: Test with coverage
      run: dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage;Format=json,cobertura" --filter "Category!=LocalOnly" --diag:logs/log.txt
    
    - name: Generate coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:"./tests/**/coverage.cobertura.xml" -targetdir:"./TestResults/CoverageReport" -reporttypes:"Html;Cobertura;JsonSummary"

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: ./TestResults/CoverageReport
        if-no-files-found: warn
    
    - name: Generate Coverage Summary
      shell: pwsh
      run: |
        .\tools\Generate-CoverageSummary-Enhanced.ps1 `
          -CoberturaFile "./TestResults/CoverageReport/Cobertura.xml" `
          -OutputFile "./code-coverage-results.md" `
          -LowerThreshold 60 `
          -UpperThreshold 80 `
          -FailBelowMin:$false `
          -GitHubActions:$true

    - name: Add Coverage PR Comment
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        path: ./code-coverage-results.md
